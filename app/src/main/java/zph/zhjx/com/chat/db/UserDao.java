package zph.zhjx.com.chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zph.zhjx.com.chat.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Login = new Property(0, boolean.class, "login", false, "LOGIN");
        public final static Property Phone = new Property(1, String.class, "phone", true, "PHONE");
        public final static Property ImageSrc = new Property(2, String.class, "imageSrc", false, "IMAGE_SRC");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property UserNickname = new Property(5, String.class, "userNickname", false, "USER_NICKNAME");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Birthday = new Property(7, long.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(8, String.class, "gender", false, "GENDER");
        public final static Property Position = new Property(9, boolean.class, "position", false, "POSITION");
        public final static Property ImageBase64 = new Property(10, String.class, "imageBase64", false, "IMAGE_BASE64");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"LOGIN\" INTEGER NOT NULL ," + // 0: login
                "\"PHONE\" TEXT PRIMARY KEY NOT NULL ," + // 1: phone
                "\"IMAGE_SRC\" TEXT," + // 2: imageSrc
                "\"TOKEN\" TEXT," + // 3: token
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"USER_NICKNAME\" TEXT," + // 5: userNickname
                "\"ADDRESS\" TEXT," + // 6: address
                "\"BIRTHDAY\" INTEGER NOT NULL ," + // 7: birthday
                "\"GENDER\" TEXT," + // 8: gender
                "\"POSITION\" INTEGER NOT NULL ," + // 9: position
                "\"IMAGE_BASE64\" TEXT);"); // 10: imageBase64
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLogin() ? 1L: 0L);
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(3, imageSrc);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(6, userNickname);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getBirthday());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(9, gender);
        }
        stmt.bindLong(10, entity.getPosition() ? 1L: 0L);
 
        String imageBase64 = entity.getImageBase64();
        if (imageBase64 != null) {
            stmt.bindString(11, imageBase64);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLogin() ? 1L: 0L);
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(3, imageSrc);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(6, userNickname);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getBirthday());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(9, gender);
        }
        stmt.bindLong(10, entity.getPosition() ? 1L: 0L);
 
        String imageBase64 = entity.getImageBase64();
        if (imageBase64 != null) {
            stmt.bindString(11, imageBase64);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getShort(offset + 0) != 0, // login
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageSrc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userNickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.getLong(offset + 7), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gender
            cursor.getShort(offset + 9) != 0, // position
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // imageBase64
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setLogin(cursor.getShort(offset + 0) != 0);
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageSrc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.getLong(offset + 7));
        entity.setGender(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPosition(cursor.getShort(offset + 9) != 0);
        entity.setImageBase64(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getPhone();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getPhone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
