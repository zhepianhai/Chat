package zph.zhjx.com.chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zph.zhjx.com.chat.dao.People;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEOPLE".
*/
public class PeopleDao extends AbstractDao<People, Long> {

    public static final String TABLENAME = "PEOPLE";

    /**
     * Properties of entity People.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_phone = new Property(1, String.class, "id_phone", false, "ID_PHONE");
        public final static Property User_phone = new Property(2, String.class, "user_phone", false, "USER_PHONE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property UID = new Property(5, String.class, "UID", false, "UID");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property Pinyinname = new Property(7, String.class, "pinyinname", false, "PINYINNAME");
        public final static Property Beizhu = new Property(8, String.class, "beizhu", false, "BEIZHU");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(11, String.class, "gender", false, "GENDER");
        public final static Property Bitmap_base64 = new Property(12, String.class, "bitmap_base64", false, "BITMAP_BASE64");
    }


    public PeopleDao(DaoConfig config) {
        super(config);
    }
    
    public PeopleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEOPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_PHONE\" TEXT," + // 1: id_phone
                "\"USER_PHONE\" TEXT," + // 2: user_phone
                "\"NAME\" TEXT," + // 3: name
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"UID\" TEXT," + // 5: UID
                "\"IMAGE\" TEXT," + // 6: image
                "\"PINYINNAME\" TEXT," + // 7: pinyinname
                "\"BEIZHU\" TEXT," + // 8: beizhu
                "\"ADDRESS\" TEXT," + // 9: address
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"GENDER\" TEXT," + // 11: gender
                "\"BITMAP_BASE64\" TEXT);"); // 12: bitmap_base64
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEOPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, People entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_phone = entity.getId_phone();
        if (id_phone != null) {
            stmt.bindString(2, id_phone);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(3, user_phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(6, UID);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String pinyinname = entity.getPinyinname();
        if (pinyinname != null) {
            stmt.bindString(8, pinyinname);
        }
 
        String beizhu = entity.getBeizhu();
        if (beizhu != null) {
            stmt.bindString(9, beizhu);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(12, gender);
        }
 
        String bitmap_base64 = entity.getBitmap_base64();
        if (bitmap_base64 != null) {
            stmt.bindString(13, bitmap_base64);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, People entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_phone = entity.getId_phone();
        if (id_phone != null) {
            stmt.bindString(2, id_phone);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(3, user_phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(6, UID);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String pinyinname = entity.getPinyinname();
        if (pinyinname != null) {
            stmt.bindString(8, pinyinname);
        }
 
        String beizhu = entity.getBeizhu();
        if (beizhu != null) {
            stmt.bindString(9, beizhu);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(12, gender);
        }
 
        String bitmap_base64 = entity.getBitmap_base64();
        if (bitmap_base64 != null) {
            stmt.bindString(13, bitmap_base64);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public People readEntity(Cursor cursor, int offset) {
        People entity = new People( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pinyinname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // beizhu
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gender
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // bitmap_base64
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, People entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_phone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_phone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPinyinname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBeizhu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGender(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBitmap_base64(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(People entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(People entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(People entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
